// Generated by CoffeeScript 1.9.3
(function() {
  var CheckError, Emulator, SyntaxError, capture, clear, cluster, commander, debug, genetics, inspect, keypress, os, ref, util;

  clear = require('clear');

  cluster = require('cluster');

  commander = require('commander');

  debug = require('debug');

  keypress = require('keypress');

  os = require('os');

  util = require('util');

  ref = require('./index'), Emulator = ref.Emulator, CheckError = ref.CheckError, SyntaxError = ref.SyntaxError, genetics = ref.genetics;

  debug = debug('tis100');

  inspect = function(obj) {
    var ret;
    ret = util.inspect(obj, {
      depth: 5
    });
    ret = ret.replace(/(-?\d+,)\n\s*/g, '$1 ');
    return console.log(ret);
  };

  capture = function(fn) {
    var e, lines;
    try {
      return fn();
    } catch (_error) {
      e = _error;
      if (e instanceof SyntaxError) {
        console.log("Error on line " + e.line + " col " + e.column + ":");
        lines = e.contents.split(/\n/g);
        console.log(lines[e.line - 1]);
        console.log(new Array(e.column).join(' ') + '^');
        console.log(e.message);
      } else if (e instanceof CheckError) {
        console.log("Error in node " + e.nodeIndex + ", instruction " + e.lineNumber + ":");
        console.log("\t", e.raw);
        console.log(e.message);
      } else {
        console.log(e.stack);
      }
      return process.exit(1);
    }
  };

  commander.on('--help', function() {
    console.log('  Debugging:');
    console.log();
    console.log('    For verbose output / debugging information, run this with DEBUG=tis100 set.');
    return console.log();
  });

  commander.command('parse <progfile>').description('Parses the TISasm save file and displays the AST').action(function(progfile) {
    var emu;
    emu = new Emulator();
    capture(function() {
      return emu.load(progfile);
    });
    return inspect(emu.ast);
  });

  commander.command('check <progfile> [specfile]').description('Checks that the TISasm save file is semantically valid and ' + 'optionally validates against the given Lua spec').action(function(progfile, specfile) {
    var emu;
    emu = new Emulator();
    capture(function() {
      return emu.load(progfile, specfile);
    });
    return console.log(progfile, 'OK');
  });

  commander.command('spec <specfile>').description('Parses the TISasm Lua specification file and prints the config').action(function(specfile) {
    var emu;
    emu = new Emulator();
    capture(function() {
      return emu.load(null, specfile);
    });
    return inspect(emu.spec);
  });

  commander.command('run <progfile> <specfile>').description('Runs a program against a specification').option('-n, --num-cycles <num>', 'Maximum number of cycles to execute', Number).action(function(progfile, specfile, arg) {
    var emu, numCycles;
    numCycles = arg.numCycles;
    emu = new Emulator();
    capture(function() {
      return emu.load(progfile, specfile);
    });
    if (debug.enabled) {
      debug('start');
      console.log(emu.toString());
      emu.on('step', function() {
        return console.log(emu.toString());
      });
    }
    emu.run(numCycles);
    console.log(emu.toString());
    return debug('finished');
  });

  commander.command('debug <progfile> <specfile>').description('Debugs a program interactively (hit Enter to step)').action(function(progfile, specfile) {
    var emu, print;
    emu = new Emulator();
    capture(function() {
      return emu.load(progfile, specfile);
    });
    print = function() {
      if (!debug.enabled) {
        clear();
      }
      console.log(emu.toString());
      return console.log("Hit Enter to continue...");
    };
    keypress(process.stdin);
    process.stdin.on('keypress', function(ch, key) {
      emu.step();
      return print();
    });
    process.stdin.resume();
    return print();
  });

  commander.command('breed <specfile>').description('Interactively breed programs (note argument order)').action(function(specfile, progfile) {
    var ast, emu, layout, layoutWidth, print, ref1, streams;
    emu = new Emulator();
    capture(function() {
      return emu.load(null, specfile);
    });
    ref1 = emu.spec, layout = ref1.layout, layoutWidth = ref1.layoutWidth, streams = ref1.streams;
    if (!emu.ast) {
      ast = genetics.generateSomewhatCorrectAST(emu, layout, layoutWidth, streams);
    }
    print = function() {
      if (!debug.enabled) {
        clear();
      }
      console.log(emu.toString());
      return console.log("Keys: (m)utate (c)rossover (a)lter (q)uit");
    };
    process.stdin.setRawMode(true);
    keypress(process.stdin);
    process.stdin.on('keypress', function(ch, key) {
      var other;
      if (((key != null ? key.ctrl : void 0) && (key != null ? key.name : void 0) === 'c') || (key != null ? key.name : void 0) === 'q') {
        process.exit();
      }
      switch (key != null ? key.name : void 0) {
        case 'm':
          console.log('Mutating...');
          ast = genetics.mutateAST(ast);
          break;
        case 'a':
          console.log('Altering...');
          ast = genetics.alterAST(ast);
          break;
        case 'c':
          console.log('Crossovering...');
          other = genetics.generateSomewhatCorrectAST(emu, layout, streams);
          ast = genetics.crossoverAST(ast, other);
      }
      console.log('Running...');
      emu.ast = ast;
      emu.reset();
      emu.run();
      return print();
    });
    process.stdin.resume();
    return print();
  });

  commander.command('solve <specfile>').description('Attempts to solve the specification through genetic programming').option('-c, --children <num>', 'Number of children per generation', Number, 20).option('-k, --maxRunCycles <num>', 'Maximum number of cycles to emulate per child', Number, 1000).option('-p, --parents <num>', 'Number of parents to pick from each generation', Number, 2).option('-m, --mutation <percent>', 'Probability of mutation', Number, 0.05).option('-x, --crossover <percent>', 'Probability of crossover', Number, 0.85).option('-r, --reproduction <percent>', 'Probability of reproduction', Number, 0.09).option('-a, --alteration <percent>', 'Probability of architecture alteration', Number, 0.01).action(function(specfile, options) {
    return genetics.solve(specfile, options);
  });

  commander.command('*').action(function() {
    console.log("Unknown command: " + commander.args[0]);
    return process.exit(1);
  });

  commander.parse(process.argv);

  if (!commander.args[1]) {
    commander.help();
  }

}).call(this);
